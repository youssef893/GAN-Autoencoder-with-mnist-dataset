# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ySmh2DIKZ5iBz4V2gweduaFY5Bqjr75M
"""


"""
        Youssef Sayed Ahmed 20180342
        Ahmed Mostafa Abd El-karim 20180031
                                                """

import keras
from keras import layers
import matplotlib.pyplot as plt
from keras.datasets import mnist
import numpy as np
from sklearn.metrics import mean_squared_error
from keras.layers import LeakyReLU

def build_auto_encoder():
  input_img = keras.Input(shape=(28, 28, 1))

  hidden = layers.Conv2D(16, (3, 3), activation='relu', padding='same')(input_img)
  hidden = layers.MaxPooling2D((2, 2), padding='same')(hidden)

  hidden = layers.Conv2D(8, (3, 3), activation='relu', padding='same')(hidden)
  encoded = layers.MaxPooling2D((2, 2), padding='same')(hidden)

  hidden = layers.UpSampling2D((2, 2))(encoded)
  hidden = layers.UpSampling2D((2, 2))(hidden)

  decoded = layers.Conv2D(1, (3, 3), activation='relu', padding='same')(hidden)

  autoencoder = keras.Model(input_img, decoded)
  autoencoder.compile(optimizer='adam', loss='mean_squared_error')
  autoencoder.summary()
  return autoencoder, input_img, encoded


autoencoder, input_img, encoded = build_auto_encoder()

def read_data():
  (x_train, _), (x_test, _) = mnist.load_data()

  x_train = x_train.astype('float32') / 255.
  x_test = x_test.astype('float32') / 255.
  x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))
  x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))
  return x_train, x_test


x_train, x_test = read_data()

autoencoder.fit(x_train, x_train,
                epochs=50,  # 5, #50,
                batch_size=256,
                shuffle=True,
                validation_data=(x_test, x_test))

def encoder_model():
  encoder = keras.Model(input_img, encoded)
  encoded_imgs = encoder.predict(x_test)
  encoder.summary()
  print(len(encoder.layers))
  return encoded_imgs


encoded_imgs = encoder_model()

def decoder_model():
  decoder = keras.Sequential()
  decoder.add(keras.layers.Input(shape=(7, 7, 8)))
  for i in range(5,len(autoencoder.layers)):
    decoder.add(autoencoder.layers[i])
  print(decoder.summary())
  return decoder


decoder = decoder_model()

def test_model(x_test):
  x_test = x_test.reshape(10000, 28*28)

  decoded_imgs = decoder.predict(encoded_imgs)
  decoded_imgs = decoded_imgs.reshape(10000, 28*28)
  print(decoded_imgs.shape)
  print(mean_squared_error(x_test, decoded_imgs))
  return decoded_imgs


decoded_imgs = test_model(x_test)
print(decoded_imgs)

def plot_decoding_imgs():
  n = 10
  plt.figure(figsize=(20, 4))
  for i in range(1, n + 1):
      # Display original
      ax = plt.subplot(2, n, i)
      plt.imshow(x_test[i].reshape(28, 28))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)

      # Display reconstruction
      ax = plt.subplot(2, n, i + n)
      plt.imshow(decoded_imgs[i].reshape(28, 28))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)
  plt.show()



plot_decoding_imgs()

def plot_encoded_imgs():
  n = 10
  plt.figure(figsize=(20, 8))
  for i in range(1, n + 1):
      ax = plt.subplot(1, n, i)
      plt.imshow(encoded_imgs[i, :, :, 4].reshape((7, 7)))
      # plt.imshow(encoded_imgs[i].reshape((14 * 14 , 16)))
      plt.gray()
      ax.get_xaxis().set_visible(False)
      ax.get_yaxis().set_visible(False)
  plt.show()


plot_encoded_imgs()